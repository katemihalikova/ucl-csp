<Window x:Class="Semestrálka.ReservationEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Semestrálka"
        mc:Ignorable="d"
        Title="Reservation Editor" Height="500" Width="400">
    <Window.Resources>
        <Style x:Key="BorderStyle" TargetType="Border">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Gray" />
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.ColumnSpan="2" Margin="10">
            <TextBlock Text="Meeting Room"/>
            <Border Style="{StaticResource BorderStyle}">
                <TextBlock Text="{Binding Path=MeetingRoom.Fullname}"/>
            </Border>
            
            <TextBlock Text="Date"/>
            <Border Style="{StaticResource BorderStyle}">
                <TextBlock Text="{Binding Path=Date}"/>
            </Border>
            
            <Label Content="Time _From:" Target="{Binding ElementName=timeFrom}"/>
            <TextBox Name="timeFrom">
                <TextBox.Resources>
                    <local:BindingProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="TimeFrom" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:TimeValidationRule ValidatesOnTargetUpdated="True" />
                            <local:OverlapValidationRule Mode="from" ValidatesOnTargetUpdated="True">
                                <local:OverlapValidationRule.ReservationsBound>
                                    <local:OverlapValidationBinder Value="{Binding Data.OtherReservations, Source={StaticResource proxy}}"/>
                                </local:OverlapValidationRule.ReservationsBound>
                            </local:OverlapValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=timeFrom}"/>

            <Label Content="_Time To:" Target="{Binding ElementName=timeTo}"/>
            <TextBox Name="timeTo">
                <TextBox.Resources>
                    <local:BindingProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="TimeTo" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:TimeValidationRule ValidatesOnTargetUpdated="True" />
                            <local:OverlapValidationRule Mode="to" ValidatesOnTargetUpdated="True">
                                <local:OverlapValidationRule.ReservationsBound>
                                    <local:OverlapValidationBinder Value="{Binding Data.OtherReservations, Source={StaticResource proxy}}"/>
                                </local:OverlapValidationRule.ReservationsBound>
                            </local:OverlapValidationRule>
                            <local:FromToOverlapValidationRule ValidatesOnTargetUpdated="True">
                                <local:FromToOverlapValidationRule.ReservationsBound>
                                    <local:OverlapValidationBinder Value="{Binding Data.OtherReservations, Source={StaticResource proxy}}"/>
                                </local:FromToOverlapValidationRule.ReservationsBound>
                                <local:FromToOverlapValidationRule.FromBound>
                                    <local:StringBinder Value="{Binding Data.TimeFrom, Source={StaticResource proxy}}"/>
                                </local:FromToOverlapValidationRule.FromBound>
                            </local:FromToOverlapValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=timeTo}"/>

            <Label Content="_Expected persons count:" Target="{Binding ElementName=expectedPersonsCount}"/>
            <TextBox Name="expectedPersonsCount">
                <TextBox.Resources>
                    <local:BindingProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="ExpectedPersonsCount" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:NumberValidationRule Min="1" ValidatesOnTargetUpdated="True">
                                <local:NumberValidationRule.MaxBound>
                                    <local:NumberBinder Value="{Binding Data.MeetingRoom.Capacity, Source={StaticResource proxy}}"/>
                                </local:NumberValidationRule.MaxBound>
                            </local:NumberValidationRule>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=expectedPersonsCount}"/>

            <Label Content="_Customer:" Target="{Binding ElementName=customer}"/>
            <TextBox Name="customer">
                <TextBox.Text>
                    <Binding Path="Customer" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:StringLengthValidationRule MinLength="2" MaxLength="100" ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=customer}"/>
            
            <CheckBox Name="videoConference" Content="_Video Conference" IsChecked="{Binding Path=VideoConference}" Margin="0,10,0,0" IsEnabled="{Binding Path=MeetingRoom.VideoConference}"/>

            <Label Content="_Note:" Target="{Binding ElementName=note}"/>
            <TextBox Name="note">
                <TextBox.Text>
                    <Binding Path="Note" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <local:StringLengthValidationRule MinLength="0" MaxLength="300" ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=note}"/>
        </StackPanel>
        <Button Content="Save" Grid.Row="1" Grid.Column="0" Width="75" Margin="0,0,0,10" Click="Save_Click">
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=timeFrom}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=timeTo}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=expectedPersonsCount}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=customer}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=note}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Button Content="Cancel" Grid.Row="1" Grid.Column="1" Width="75" Margin="0,0,0,10" Click="Cancel_Click"/>
    </Grid>
</Window>
